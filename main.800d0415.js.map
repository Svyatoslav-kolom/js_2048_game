{"version":3,"sources":["scripts/main.js"],"names":["tableBody","document","querySelector","scoreDisplay","startButton","startMessage","winMessage","loseMessage","messageContainer","gameBoard","score","reduce","acc","row","rowSum","cell","gameStarted","gameWon","checkGameOver","length","column","classList","remove","checkGameWin","some","tile","moveRight","moved","currentTile","nextTile","generateRandomTile","moveLeft","moveUp","moveDown","randomRow","Math","floor","random","randomColumn","number","handleKeyPress","ev","key","render","addEventListener","innerHTML","i","createElement","add","j","cellValue","textContent","appendChild","toggle","contains","removeChild"],"mappings":"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","file":"main.800d0415.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableBody = document.querySelector('tbody');\nconst scoreDisplay = document.querySelector('.game-score');\nconst startButton = document.querySelector('button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst messageContainer = document.querySelector('.message-container');\n\nlet gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = gameBoard.reduce((acc, row) => {\n  return acc + row.reduce((rowSum, cell) => rowSum + cell, 0);\n}, 0);\n\nlet gameStarted = false;\nlet gameWon = false;\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nfunction checkGameOver() {\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = 0; column < gameBoard[row].length; column++) {\n      if (gameBoard[row][column] === 0) {\n        return;\n      }\n\n      if (column < gameBoard[row].length - 1\n        && gameBoard[row][column] === gameBoard[row][column + 1]) {\n        return;\n      }\n\n      if (row < gameBoard.length - 1\n        && gameBoard[row][column] === gameBoard[row + 1][column]) {\n        return;\n      }\n    }\n  }\n\n  loseMessage.classList.remove('hidden');\n}\n\nfunction checkGameWin() {\n  const result = gameBoard.some(row => row.some(tile => tile === 2048));\n\n  if (result) {\n    gameWon = true;\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = 1; column < gameBoard[row].length; column++) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row][column - 1];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row][column - 1] = 0;\n          column = -1;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row][column - 1] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < gameBoard.length; row++) {\n    for (let column = gameBoard[row].length - 1; column >= 0; column--) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row][column + 1];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row][column + 1] = 0;\n          column = gameBoard[row].length;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row][column + 1] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let column = 0; column < gameBoard[0].length; column++) {\n    for (let row = 0; row < gameBoard.length - 1; row++) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row + 1][column];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          [gameBoard[row][column], gameBoard[row + 1][column]] = [nextTile, 0];\n          row = -1;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row + 1][column] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let column = 0; column < gameBoard[0].length; column++) {\n    for (let row = gameBoard.length - 1; row > 0; row--) {\n      const currentTile = gameBoard[row][column];\n      const nextTile = gameBoard[row - 1][column];\n\n      if (nextTile > 0) {\n        if (currentTile === 0) {\n          gameBoard[row][column] = nextTile;\n          gameBoard[row - 1][column] = 0;\n          row = gameBoard.length;\n          moved = true;\n        } else if (currentTile === nextTile) {\n          gameBoard[row][column] *= 2;\n          gameBoard[row - 1][column] = 0;\n          score += gameBoard[row][column];\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    generateRandomTile();\n  }\n}\n\nfunction generateRandomTile() {\n  let randomRow = Math.floor(Math.random() * 4);\n  let randomColumn = Math.floor(Math.random() * 4);\n\n  while (gameBoard[randomRow][randomColumn] !== 0) {\n    randomRow = Math.floor(Math.random() * 4);\n    randomColumn = Math.floor(Math.random() * 4);\n  }\n\n  const number = Math.random() < 0.1 ? 4 : 2;\n\n  gameBoard[randomRow][randomColumn] = number;\n}\n\nfunction handleKeyPress(ev) {\n  if (gameStarted) {\n    switch (ev.key) {\n      case 'ArrowUp':\n        moveUp();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n        moveRight();\n        break;\n    }\n  }\n\n  render();\n}\n\nconst render = () => {\n  scoreDisplay.innerHTML = `<span class=\"game-score\">${score}</span>`;\n  tableBody.innerHTML = '';\n\n  for (let i = 0; i < gameBoard.length; i++) {\n    const row = document.createElement('tr');\n\n    row.classList.add('field-row');\n\n    for (let j = 0; j < gameBoard[i].length; j++) {\n      const cellValue = gameBoard[i][j];\n      const cell = document.createElement('td');\n\n      cell.textContent = cellValue === 0 ? '' : cellValue;\n      cell.classList.add('field-cell');\n\n      if (cellValue !== 0) {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      row.appendChild(cell);\n    }\n\n    tableBody.appendChild(row);\n  }\n\n  checkGameOver();\n  checkGameWin();\n  winMessage.classList.toggle('hidden', !gameWon);\n\n  if (!gameStarted) {\n    messageContainer.appendChild(startMessage);\n  } else if (messageContainer.contains(startMessage)) {\n    messageContainer.removeChild(startMessage);\n  }\n};\n\nstartButton.addEventListener('click', () => {\n  gameStarted = true;\n\n  gameBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n  loseMessage.classList.add('hidden');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n  generateRandomTile();\n  generateRandomTile();\n  render();\n});\n"]}